import heapq
"""The template for a "write a program" question type that accepts answers
    in C, C++, Java or Python3 according to the value in the language select
    dropdown menu.
"""
import random
import subprocess
import re
student_answer = """{{ STUDENT_ANSWER | e('py') }}"""
language = """{{ ANSWER_LANGUAGE | e('py') }}""".lower()
language_extension_map = {'cpp':'cpp', 'python3':'py'}

if re.search(r'^\s*(import|from)\s+\w+', student_answer, re.MULTILINE):
    raise Exception('Imports are not allowed in the student answer.')

if language not in language_extension_map.keys():
    raise Exception('Error in question. Unknown/unexpected language ({})'.format(language))

filename = '__tester__.' + language_extension_map[language]

# Write the student code to a file

with open(filename, "w") as src:
    print(student_answer, file=src)
#compile_process = subprocess.run(["g++", "prog.cpp"])
# Compile C++
if language == 'cpp':
    cppflags = "-Wall -Werror"
    return_code = subprocess.run(["g++", filename])
    #if return_code != 0:
    #    raise Exception("** Compilation failed. Testing aborted **")
    exec_command = ["./a.out"]
else: # Python doesn't need a compile phase
    exec_command = ["python3", "./__tester__.py"]

# Now run the code. Since this is a per-test template,
# stdin is already set up for the stdin text specified in the test case,
# so we can run the compiled program directly.

def check(reply, clue):
    return str(reply).strip() == str(clue).strip()

def generate():
    dataset = ['ACGTACGTGACGTTAGCTAGCTGACGTTAGC', 'TCCTCTAATGGCAGGTAAAGTATTTTCTATTTTACCTCAAGGCGTCGGGGCCCACAATGGGAATTAGACAACATATGGCTCCCATTCTCCCTGGTGGTAA', 'CATCAGAAGTCAATCACGGTTGCTAGTCTGCGAAATGGTCCAGTCATACTTATCAAAGGCCGCGAGCTGCCCAATGCATTGCAGAAATGCTCGTTACGCCGCGTGCGTGGGCCGTAAACTCGATGGAGCTCCCCCGCTGGCTCCCCATCGGTACAGTTGCCCTAGGCGAGCTACGTCCCGAGTTCTCGCAGTCATACCCTAATACGATGTCCACGGCTCACGTCGTGATCATCGCCATCCCAGCTTAATTAGACACACCTGTCAAGTGATTTTGCACGTTGTAAATCCATATCCGCTCCCCTGCAACGGTGTTGAGTACAGTATCCCTGGTATAAGGGAACTCGCTTACGCAGTGTCCCGGTACGCCCGCGAGAGAACACCCATATATACGTAGCGAGTAGGCTTCCTTGACGGCCCTGGGGGCACTCGCCGCGCAACCGCAGGCAGAAAAGGAGGTTCCCTCATAAGTCAACTACACAGAAATTAACCTGACGGTGAGGGTGTAGAACCTTCTGTTTCACCCTGTACAGCGGCCACACGGACTAGTTTCCTATGACGGCTCTGTACCGCAATGTATTAGCCGTAGTGGTGGCCGCAAGGGAGGGTCTTCTGCGTAACAGCTAAATTAGTTGCTGGAATTGCTGACTCAGAACGGTATGGGATCGGTTCGACAGAACTCGAGTGTATAGGCGATGGTAGGTCAATGTTCCGGATACATCCAATTGGGTATGAGCATGGGTTTACCTAAGCCGGAAGGCTGCGGATAAAACGTCCAAAGGATGCGAGCGTTGCTCGGCCCAACCCCGTAGTATGCTAAGAGGCCTGCAAAGCGATCAATTAGCCTGGATGTGACGTCAACCGCTTCTATAAACATGTATCCCGGACCTGTCGGGCCTCGGATAGAAGTTAGTCCCAGTGAGCATTCCGACTTTCTTGATCGCCGTAATGCTATGCGGGTCGTACTTGTGGCAAAACCAGCGCTACAATATGGCCGAAACTG', 'GGCTTATAATCATAAGGTTGGTGGGAATTGTCTCACCAGCGAAAGTCTTACAGTTTCCAAATACTTATTACTTGACCTGCCGTGTCACCGGGACAAAACACATTAATTGGCGAATTTAGGCGGTATTCGAAGCCGGAAATATATACGGTCTATTTGTAGCAGGTTTAAACGCGGGTTGTGTCAGCCATAATTGGTCTCATCGCCAACACGCCGGTATACCAAACTACAACTCAGTTCTGCTGGCTAGCATGGTAATCGGGGGCCGGTGTTTGGCCCGTCTGAGGATAACCCGAAAGAAAAACCGCACCGTACGATCAAGCAGGTACCTACCGTGGCGCGCGTTACCCTCCTGCTGCCGTGTACCTGACGGAAGTATGATCGCACATCCACCTATAGTACTTAGGTCACACAGGCATGATCGGGGCCGTTCTGCCCATTAAATATGTCATCCTGACGGCGCTTTCGACACGGACCCTACCGACCAGCCGAGTGATCAGGCTGGTCCGGTATTTATAGGCACAAGCAGGTCTAACGAGCGAGCCCGGGAATGCTCTAGAACAAGCGTCAACAAGACATGGGCGGATTGCAAAAAACCGGATAAGGCCCTGCGAGACGTAAGTACTAAAGAGTCAGCAGGAGTCGCAGCATATTTGCTCAACTGCCTAACTCACAAGGGGCTTAAGATACCTTCCCAGTGGAATTAGTCTAATCTTGACTATGTTCGCCACGGATCCCAAGGGGGCACATTTGGTTGTAAAGGTCCTAATCGCTCGAGTAGCAGCACAGTGAGCGCATCTTAATAGCCTAGGCCGACATATCGGGAATGAGTCGAGATATCCCACTCGGCGACGCCTTCTGGGTTGTCATGGTTCCACGTCATCCTACTCATGGAATGTTATGCCGTGGGGGTAAGGAACTCGATGAAGTGAACCGGCTTGCTGTGGCACTGTAAAAATTTATTGGCGGCGTCCCATAGACCCCGGCACCTCATTCTCGTAAGCGCAGTGCATGCAATTACCTTGGCTTGTGTCTAGGTCGACCAGGTTAGACGTTGCATAGACCGTTTCTACCGAGCGTTCCAAGCGCGAGGCCAAGGCGTATTACGACTAGTCAAATCTTGAGTTAGTTGCGGCTGCTCTGTAAGTCCTCAACTGCTTATCTCGAAGGCATAAGGGTGGGTATTTATTACGGGCCCTAGACATGGACAGTGAATACTAAGCAGGTGCTCAGGTCAGGATACCTCTTGCCCTCAAAGTAGCAAGCTGCGTTTCTGCACCCTATTCGCCCACGATCGGTTGCCCTGCTATATTCCTTTGGCGGACTGATCAATTTATAAATGGGTCTATACCGTTACGCTAACCGGTTTTAGTATGCTTCGTAGCTTGTGCACCTAAAATCCACGGGATATTGAGTGCTATAGGCGCACATCACTGTGCAAGTCCCATTCCTAAAATGTGGGCGAGTGAGCACACGCTTGTTAGGCGAAATGATGGCCCCTCGCAAACCGGTTATCTGGTCCAGCGGCAGCGCGCGGAAGTTGCGACGGGGTACTTTGCAAATCCGGAAAGCGAAGGAAATAAACAGGCGTTGTACCTTCTTTGCGGGTCCTTCCGTGACGTAGACAGATTGTGGATAAACTATGGGGCGTCGTGTGGAATCGATCCTTACTTATGAGCTCATTCAGCCACGCCATCGTTCCGATCCAACCTGGGTTGAAACCGCGAGGCGATAACGGTACCGGGGTATACTGGTTAATAGGGGGACCCTTGTATGGTTCTAGTATAAGGGGCTCTATTCCCTGCCCACTACTGTAATAGCCCAAAGCCTTTGCTGCCACCATGACCCAGGCCTTCTATTTTCGTGTTTGCCCGAGGCTTGGCAATTGATTGCGACTTACGAGTTTTTAGGTACATAAGGATTCACTTTAAATAGATCTAACTGACTTGAGTCCATGTTTCCTATCCCAGCGATCGTTTCGTCACCTTTGCTGCAACCCGACCCCGACTTGAGGCAACAACAAGAACGCTAGCAACGACCCTCAAACTCTCAAGTCGAGCGGACGTCTGTCTAACCGAGCAATCTGTTTCGCATAATTACACAAAATGTGCGGTCTACATAGTGATAACAGCCATTTCACTGATCACTGTAATCAGGTTACCGCCCACATGCAGAACCGGAGTGTTGCCCTAGGACACCAATCTGCAGAGCTAGGGCATTCGGACCGCTAGGGGCGAGATCATTAAGCACATTTGACGGAGGCAGGCGAAATTCTATCAGTGGAAGGTCGGCAAATCTTTAGCCGTTCCTCCTTAGTGTACTCAGAAAATTCAAATAACAAGTAACTAGTTCTTACAAATAACGATCGACTGACAGCAGTCTTCCCTAGACGGATTGGTACCTACCGTGAACGGGCGAGATTGGGTTAATACTCCTGTCCACAGCAGACTCGTTAATGCTCCCCAAGGTGATCGAGTTGAGCCGGACTTCGTTCCGACGTCCGGAATCATTGATCGACCTCGGATGGCGTATTTTCGTATGGAGAGACGGGCAGCGTTACTTGGCAGGGGCGGACATCCTGAGTTGTCTATCCTTGACCCGCGTTGAGACACTTCCCCACGATGTAAATCAAACCAAAGTTTTCTGAACTGTCTATATTTTCCCACAAGGCAAGTAAAGAATCTTTCACAGTAAGCGAGTTACGATATATATGATAGCAACGAAACGTGGTAGTTTGGTGCGTAGGTAGCCTACGGGGCATCCAGGCTATTGAGAGGAAACTATAATTAAAATTCTTGTACGAGGTTTAGGAAATGTTTTCCTACGATTCCACATGGCTGGAAGTACACTCATGAACGGCACTAAGCTCCAGTCGCTGCCGTGGACCGCTTCGAGAGCACCACTTTTTTTTAATGGCCTCTCGTAGTTCCAACTCACAGGTTAGTGTCATGACGGTCCCCATGAGTCCAGTTTTCCAACTCATAACGAGCAGGTTCACCTTCGCCTACGTCAGTCCAGATGGGTAATAGTCGGTCGCATAAGGGATCGTGCCCCCCACGCTGACGCATGGCGGAGGCGGACAGCAAATCACGCGATATAGCATCCCAAGTTGCGCTCAACCAATCGAAGGCTGATCTCTCGACAGCGTTACAACAGTAGGGAGAGGTGCGATAGAATACGAAATTAAACAGACCAATCTGGCATTGGAGTCATGGCGGGGAAAGGAGGCCTCGATTTGCATATCAAGCAACTAACGACAGTACGCACATACCTTCCACGACGTTAGTCAACGGCATCCAAACTGGAACATCACGCCCCACGAAAGCAGGCGTCGCCCGCTGCCTAAACGGTCTGTGAGTAAATGGGGAACAGTCGGTTAAGACGACCATTGTGTCCAACTTCGGTAGCGAACCTCGCGGAAGCACCTTTTGTAGCTAAACCGGCGAGACGATACAAATGAGCCGCTCAGATGCCGCGCGTTGGGCAAGCTACTACTAAGTTATTACCGTACGAAAATCCGGCTCAGTCAACATGCACAGGCCATAAATTCACGAACTCAAAGGTTCGCGTCATGCTGCAACACCAGGTAACAGTGTACTGCTTCGAATACGACGATTAAGCCCTCAGAGGGTCGGAAGGAGTACCTTAGTGTCTTCTTCGCCTCACTTACACGAATGGCGTAGGCTGTGCTCGGGAAAATATTGCTATTAGGGATGTGCGCCTCGTGAGCGGCTACAAGCACCCGTCTGGGGAGCAAGTACCACCTGCATAGGTCAGTTGTGAGTCTGTTGCGAATCCTCAACCTTACGCTGGGGACGAACAGGGTTGCGAAGTTCATTCCTGTGGACGACCCGGTGTATTTAGTAAATCCGTTTCTCAACTCTGAACAAGGACAATATTCTGACCCCGCAGACCGCAGAGGGCCCAAATTCCGAGCTGGCTGACCTTCGTTCCCCGCCGTGCTGACGTGTACGCTGTTACCTACTCTACGCGGGACGTGGTCGCAGATTTTGCACGTCTGTCTTGAACCGCGCCTTTATTGTAGGTGGAGGAGCTCATGTTGTGGCTCCGCGAACGTGACTTGTACGTTTTTTAAATCGCCTCCTGAGAAAACCAATATTCGGGGTCGCCATCTTCGGTCTCCGGTAATTTGTTATAAATGGGGGCCGAACGCGCTTTGGAACTACATGCTTGGTGGTATGAGGGCATAACGCCCACCCGACCGAACCGACCTCCCGGGGAACTGTCCTATCACACTAATCGATTCGATCCACAGAAGGTGCGGCTGATCTTGAAAGCTGGTGCATGTCCCGAGCACGTTAGGACGGACTCTCGCCTGTTGGCCACGTATTTTAACGGTATCGATATGGCGATCACCATAATTACACCACACCAGGTCCAACATACCGACTACGGACATCGGTTTCGCTAAACTCAGAGGTCCATCTAAGCCCTCCGATTACACCGCATACATCGGCTCTCGACTATAAATGAGCATCTTTTAGTGCAGGAGGTGAATCTCCGCGTGATTAGAATGGGAATAAAAGCGGGGCCGTCAAACTAGGACACTTTGCCTGCTAAGTTTGCGCAAGTCCCGCCGTTCCGCTACATGTGCGGAAGTGCGGGCGTCACGTAACGCGCGCTAAGGCGCTAGCACTAGTCTAGGAGCGCGGATCTTATGAGTTATTCTGTAGTGCTGGTTCTTTTTCCCAATACCGTTTAGACCGAGGTCCCCTAATAGAAACGGTGCCATCTCTGGCTCTACACGTATTAGCAATAAAGCCCCAACCCTGTGGAGGTCCTAACAAAGGTGCTAGATCAAATCAGAGAAGGACCGAGTCCCCAATTCGGTCTAGCAACGCCAGTCTAATGTCACGCACAGCACACTGGCCCGAGAGGGCAGGTACCGCTGGACTTGATGTAGGTAATTGGGCAAGTCCGCAATAGAAGAAAGTTCACGCTCTGTAGTCGGAATAAATTTTGCCTAATGGTTTTCATGGCCGTGTATACCACCGGGTTGGGAAAGCAAGCGCGTACGCTTCCTATTCTTTGATGGGAGAGGTACTTCGTACACTAGATCAATATTCACACGGTAGAAGGTTTGGAATCGTCAAATAGCCCGTGGGAAAGAACTTATTTGGCTTATGGCGTAAGATTGATACTAAAAAGTCATGTTATGGATTTGAATGATCCGCAAATCAACTGGCCATGCCGGTTGTAAAGAATCCCATGTCGTGTACCGGGGCATTTGAGGAGGGGTGGCAGTCAGTTCGTAAAAATACTGGTGCCCAAAATTACCAAAACCGACAACTGAGCGACATAAAAACGCTCCCTACTTGATGTCAGCATTAATTCTGGCCCGTCGGAAACACTTTAACTCCGAGGCGGCCACGGGCTGACATTCCCACAGTTGTTTCCCTGCCCGGGAAAGCTATTGTGCGGAAACTCCTCTAACTGCTTTGCGAGCAGAGCTATCTTATGATGACATTGGTACCTCCCCGAGTAATCCTTCAGAATAGACACTTCGTCATAAATGCGCCCAGTTTCACTAGAACGACGAGCGCCGCCATATTTAGGCCCATCCACATTCACCACCTATGAGACCATACTTAGTAATGCAAAGTAGAGTTGTCCCGCCGATTCCACCAATGCCGAACTACAACCGTGTCAGTGGATTCGCCGCCCAGGGACGATTTATGTCCACATCATACATGCCCGATTGTTTATTGGGGAGCTAATTGTTTTATGGGTATGCTGTCTTGGTCTACCGTCATGACAGTTATACCACGCACACTGAAGAGGTCCTTAAGCTTGTTCTAGCTGGCGATGCGCGATTCATCGAAGCAATGGGTAGTTGTATGTACATGACGCTTTGGACGGCAGTGTCTTTCGGGCGTGGCGGTTACATCCGAAGGAACTCGAGCTGATTAACGCGGGAAATGCCGTCTCTCCGAGACCAAGACAGAACAAAAGGTCGGTGGTATACCTACGTTATCTCACATAGGTAGCTGTTTAGTAAGGTAGCTACCTCGAGTAGCGTCAGCGCCCTCGAGGCTGCAGGAGTGGCTACTATGATCGCCGTCTCAGCGTGATAGTAAGTCCGCAACTGACAGTTGGGATAAAGACATACCCTTCTTGCTTGCGACTTCCCCTAGACAGCTCCATCTTGATTGTACTTAACGCTTTCCACGGCGATACGGGGGCGGAGACAATCACTCTGCCCCATCTATATTGAAATTGGCGACTATACAGGCGTCGGCACATGGCGCACGAGTGTGCTATGGTACAGAGTCGGTCTCGTTGCCAGTAATATGCGGAATGTCTTGCGCTATTATATTCCCCCGTACACGTGCACAAAATACAATATGTTGACTTATAATATGATCCGATGAAATATCTAAAGGTTTCGGATAGGTTGTTCGCAAAGCGTCGGGTGTTTTCTAGGCGAGACAAGGCACATGGCCGATTGGATCGGGGCAATCAGGCCACTGAATTAGGGTACTGGCGAAAAGACAGCTGTAGCTAGCAACTGAAAGTGACCATCTATTTCCCTGTCAAAGTGTAGAAACTGCGACCTGGCTAAATGCCTACGGCTCTGATAATAACGCATGGAGAATTCGACCGATGAGGTATGATGTGAAGACGGTAATGTAGGCGACGTTTCGGGTTGTGCAGTGAGATCGGGTATAAATTCCCGAATTGGCTGGTGCATCAGGAAGTCAGTACACTCTGGACTCGATCCTATAGCTGTCCGTCGATGCTGTTGCCGAAGTAGTAGCGGCGTAGGAAACTAAAATGCAACTTTCCCATCCTATTACCGCTTTGGGTGAAAAATCACTCGCGGGACCAAAGCAATTGCCCGCGATATGGAGTGGGCGCACTCCCCTGGAATTCGGGCAGCGTTCTTGTTTACGTTCTCGGTTTACAAGACTCATGTCAGGGATTCCAAAGCGGGGTCCCGAAGAAAACGGCCGAGCCGTTATTGTAAGGTTGTAGTCATGCTCACGCCTCTCCCTTACGATGCACCACCGCATGACCGCTTGTAAACATGGGACGCGTCTCTGTAGCTTATCGCCAGATGCTGGATCAGAGACGGTTCCCTCGATACGTTAACATCCGTTGAAGCGCCTGGGCGACCTACTTAAACCAGGTTCGAAGACGAGTTGTTATGGTGACTGACTATAAGGCGTGCGTAGTCCAGGGATTTAAGACCCCGGCATTCTGGAGTCGTTGCTCTCTTTATGGCATGTGCAACTACTACATTAGCCGTTAACAGGCGCCTTGAGAGTTGCGGTCGTGGCACGGGCCTGATAATTTTACCTCTCGCCCGGCTCAGTTCGATTGAACATAAGAGTGACCGGCCCTTCTGTTCCTCTCTTTTCAGTACGGGATCGTCGATATATAATTTAGCGGGCTTGATACTCGTATTAACATTTTTGCGCCGAGCATACGTTGTAATAAGGGAGTGTATGAAGCAACCACCTCCCACCGTCGTATCGGGAGGGACTCGGAATAGAAGCGTACCTGGTTTTGTCCCCACCAAGGCCCCTTTCAAAGACTGGGTGATGGTATCTGGTCACTACGTTGCTTGGTGAGAAATCGCGTTTGCCCCCGAAAGCTTCCAATATAAATCGTTTGGGACCGTTAATAAGGGACATATTTTGTATGTTATACCGACACCAAGGAACTATCAGGCCTCATGACTCATCATGTAAGCGACGGCCGTCCGCGAGCGCGAAGAGGCCTTGGCGCCGCTCAACACCTTACTGTTTTCTAAGATCACTATCAACTTAGCACTCAGGGAATTGCCTCGCGTATGGTGTCGCAAATGTCGCTTGACTTCTCTCAGTTCTAGGATCCATAGGTCTGAACATCACTATGGCCGTAGTTCGTAGTCTTTATGATGGAAATATGACACTTCGTTGCCTATGCCCAGATCTATCACAATCTTTACGGTTGGCTTCAATTTCTGACCGTCCCCACCTGTGGCCGGTCTCGCTAAGGACATCTTACGTCATAGCTCCCCACATAGTCAGATTACCATATTGCCGAACGTGTTACACTCTGAATCTTGGGGAGTACGACCTCTCCGGGCGCGGGATCTGCCATGACTGCTATCATGTGCACATGAAGGAGAGATGGCTGGCCCTTACTCATATATCCATTCACTCCGCACATCGATTCATTGGTCGACGCTGAAATTTCATCGTCGGTGCTAATAGCCCTGGTTATTAGAGAAACAGAGGCTTGGAAACCGGTTTAAAAGCACGAAGATCTGTGTTGTGCCCTCAAATGCTGCTGGATTCCCACTGGCGACGAGAAAGCCCCAATACATTTAATACTGGGCCGTGCACAATGGGCCTTTTGCCGTCGGGGGCGTTGTTTAGTGATTTTTGTTGGAGTCCGTCGTTCGTATAATCGAAGCCGGGTTTACCATTAGCATGAAGTCCTTACGGCGTTGGGGTAGGTATACTGTAGTGAAATTCGGACTTAGTAGTGAGTACCCTGACCAAACTCGTACGAGGAATGTGGAACTCTCTGCTCAACTCCCTGTCTATTTCTTGTTAGCCTGGGAGGAGAGTTAAGGGGTTTACTATAGTCCGCAAAGCCATGCCAGATCACTTATCGATAGCGCCACTTGGACTGCTGCTGACTCCACACAGACTTCAATCCGTTCAGAACGTCAAGAATCCCTTCCGAGCGCACCAGTCGGCAACTCGGGGCATTCGGTATATCATGTAGCGTTCGGTCATTCGGAGTAACGTAATCTAGGCCAAAAAAGTACCTCGCCTTCGTGCAACACACCGAGGTCGGACCCGACTTACTGGATGAAATGAGGGGTCCGGTTGGTTCTGGCAACAAGTCTTTACGGGTGGCCCCTATCGAGTACTTTAGTCCTTCCGAAGCACGGGAACCAAAAGTCGCGACTATTTCCGCGACGTGTCTTCGGAGTGGTCGAGTTCGTTGCCGTAACTGTACCAACAGAGGTCTGTTGACAGCCCCTGTTCAGCTGTCGCCACTCGAGGAGGGCTGTCTGCTACACACACAGCCAGCCGAAATTCGGACTCAGAAGCGCCTTGGACACTAATGGGGAAGCGAGTATTCGGAACAGAGGCACAGATTTCATTCGCTGAGGCTGCTAAACCTTCGGCATGAATTAATGCAACGCGGTAGGACCTCGAGGCCCCCTCCTGAATATAGGCAAACAACTTCTAATCCCGGAAGTGGAGTTGCTGCTGTTTCCAGTAGGTGGAAGCCCTTTTCGGAGCAGTCGTTCTGACAATGCAGGTACCTATGCGTGGAAGCGAATCTTCATCCTCCATCGAGGGACGCAACCGGATTCAGCGTGAGGAAATAACGATATCAAAATCACTGCAACACCGAGGTATGCATTCCTCTGAATTGGGAGCGTATTGGTGTACAGGGCAAGGCAGTGTCGAAAGATAAGAATACCGCCCGTCTAACAACTATGGGATCCATCCCCCAATTGGCTAATATTTAGGCTCGACACCCGTTTGGAGCTTTTGGCCTTTAAGTATGCTTCCACGTGGACCGTCTGACATCTGTTTCGTATCCCCTGCGGAGCCGTGGTACGCGTCCCCACCAATACCCCAGTGGAACGAGCAATAGGGACACTGCCAAATTTTTGGACCAAGATCATTTTCGGACGTATCGAAACCTCCGTACGCGCGGAGGACGCGGCCCTAAGTAATCGCTGGATGGCCCCTGTCACACTTCACAAAAAAACCCCTCCCTAGCGATTTTTACCTCTCAATGTGCGCAGTCTCAAGTTGCTGAGATAAATAGTCCAGCAGTGGCGGATATTAACCTTACTCAAGTCCTTGTCTGCACCGGACCAGAACGAATGTCCACCAACAACGAGGACGTTTTACTCGTCATAGAAGTTAGCGAAGCTTGGACTTCGCAATGGTTCCATGTAAGGAGGTGGGGTCCTGCCCCCGATTGACTGCTAACCATCTCGCGGCTAGCCATCAATTATGGT']
    return dataset

class Node:
    def __init__(self, symbol=None, frequency=None):
        self.symbol = symbol
        self.frequency = frequency
        self.left = None
        self.right = None

    def __lt__(self, other):
        return self.frequency < other.frequency

def build_huffman_tree(chars, freq):
    priority_queue = [Node(char, f) for char, f in zip(chars, freq)]
    heapq.heapify(priority_queue)

    while len(priority_queue) > 1:
        left_child = heapq.heappop(priority_queue)
        right_child = heapq.heappop(priority_queue)
        merged_node = Node(frequency=left_child.frequency + right_child.frequency)
        merged_node.left = left_child
        merged_node.right = right_child
        heapq.heappush(priority_queue, merged_node)

    return priority_queue[0]

def generate_huffman_codes(node, code="", huffman_codes={}):
    if node is not None:
        if node.symbol is not None:
            huffman_codes[node.symbol] = code
        generate_huffman_codes(node.left, code + "0", huffman_codes)
        generate_huffman_codes(node.right, code + "1", huffman_codes)

    return huffman_codes

def huffman_encode(text, huffman_codes):
    return ''.join(huffman_codes[symbol] for symbol in text)

def huffman_decode(encoded_text, root):
    decoded_text = []
    node = root
    for bit in encoded_text:
        node = node.left if bit == '0' else node.right
        if node.symbol:
            decoded_text.append(node.symbol)
            node = root
    return ''.join(decoded_text)


def result_func(dataset):
    freq = {}
    for char in dataset:
        if char in freq:
            freq[char] += 1
        else:
            freq[char] = 1

    chars = list(freq.keys())
    frequencies = list(freq.values())
    huffman_tree = build_huffman_tree(chars, frequencies)
    huffman_codes = generate_huffman_codes(huffman_tree)
    encoded_text = huffman_encode(dataset, huffman_codes)
    decoded_text = huffman_decode(encoded_text, huffman_tree)
    return encoded_text


tests = generate()
len_tests = len(tests)
incorrect_count = 0
correct_count = 0
COUNT_OPEN_TESTS = 3
try:
    for test in tests:
        stud_output = subprocess.check_output(exec_command, input=test, universal_newlines=True)
        expected_output = result_func(test)
        if str(expected_output).strip() != stud_output.strip():
            incorrect_count += 1
            if incorrect_count < 3:
                result = f'Test: {test}\n'
                result += f'Your answer: {stud_output}\n'
                result += f'Correct: {expected_output}\n'
                print(result)
        else:
            correct_count += 1
except subprocess.CalledProcessError as e:
    if e.returncode > 0:
        if e.output:
            print(e.output)
    else:
        if e.output:
            print(e.output, file=sys.stderr)
        if e.returncode < 0:
            print("Task failed with signal", -e.returncode, file=sys.stderr)
        print("** Further testing aborted **", file=sys.stderr)

if correct_count == len_tests:
    print('OK')
else:
    print('Failed')
